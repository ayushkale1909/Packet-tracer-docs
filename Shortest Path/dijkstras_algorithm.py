# -*- coding: utf-8 -*-
"""dijkstras_algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HrSQz7xrvQrkNKQHDK5yChtg__P7Risy
"""

import networkx as nx
import random
import matplotlib.pyplot as plt

def generate_random_ip():
    return f"192.168.{random.randint(1, 255)}.{random.randint(1, 255)}"

def create_random_graph(num_nodes):
    G = nx.gnm_random_graph(num_nodes, num_nodes * 2)
    ip_addresses = {node: generate_random_ip() for node in G.nodes}
    nx.set_node_attributes(G, ip_addresses, 'ip_address')
    return G

def choose_source_and_destination(graph):
    nodes = list(graph.nodes)
    source, destination = random.sample(nodes, 2)
    return source, destination

def find_shortest_path(graph, source, destination):
    shortest_path = nx.shortest_path(graph, source=source, target=destination)
    return shortest_path

def print_graph(graph):
    pos = nx.spring_layout(graph, k=0.9, iterations=50)
    nx.draw(graph, pos, with_labels=True, node_color='skyblue', node_size=700, font_size=8)
    labels = nx.get_edge_attributes(graph, 'weight')
    nx.draw_networkx_edge_labels(graph, pos, edge_labels=labels)
    plt.show()

def print_ip_table(graph):
    print("Node\tIP Address")
    for node, data in graph.nodes(data=True):
        print(f"{node}\t{data['ip_address']}")

def main():
    num_nodes = 45
    graph = create_random_graph(num_nodes)

    print_ip_table(graph)

    source, destination = choose_source_and_destination(graph)
    print(f"\nSource Node: {source}, IP Address: {graph.nodes[source]['ip_address']}")
    print(f"Destination Node: {destination}, IP Address: {graph.nodes[destination]['ip_address']}")

    shortest_path = find_shortest_path(graph, source, destination)
    shortest_path_ip = [graph.nodes[node]['ip_address'] for node in shortest_path]
    print(f"Shortest Path: {shortest_path_ip}")

    print_graph(graph)

if __name__ == "__main__":
    main()